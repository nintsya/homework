'number' + 3 + 3
//number33 , стрінга, тому 3 і 3 теж складаються як стрінга
null + 3
//3, що я можу про це сказати?
5 && "qwerty"
//"qwerty", бо тру і тру, а для енд повертається останній тру
+'40' + +'2' + "hillel";
//'42hillel', спочатку до числа 40 додається 2, бо '+'' перед стрінгами робить число, потім додаємо стрінгу. тому все стає стрінгою
'10' - 5 === 6;
//false, не може від стрінги відняти, тому перетворює 10 на число, віднімає 5, виходить 5, це не дорівнює 6, тому false
true + false
//1 , 1+0=1
'4px' - 3
//NaN, не знаю як прокоментувати, з цим треба жити
'4' - 3
//1, може, тому конвертує і віднімає
'6' + 3 ** 0;
//61, 3 в 0ій ступені це 1, а 6 стрінга, склеюємо
12 / '6'
//2, може, тому перетворює і ділить
'10' + (5 === 6);
//10false, 5 не дорівнює 6, тому false, потім склеюємо стрінги
null == ''
//false, не знаю що сказати, я думала буде тру, а вже '===' буде false. ну як є, так є, може ви поясните
3 ** (9 / 3);
//27, 3 в третій 27
!!'false' == !!'true'
//true, непуста стрінга значить тру, з ! це фолс, з двома ! це тру. аналогічно справа. а потім порівнюємо тру з тру, буде тру
0 || '0' && 1
//1, '0'-тру , тобто 1, 1 і 1= 1, 0 або 1 буде 1
(+null == false) < 1;
//false, 0 порівнюємо з фолс, це тру. тру це 1. 1  не менше ніж 1, тому фолс
false && true || true
//true, фолс і тру повертає фолс. потім фолс або тру повертує тру
false && (false || true);
//false, фолс або тру повертає тру, потім фолс і тру повертає фолс
(+null == false) < 1 ** 5;
//false, 0 порівнюємо з фолс отримуємо тру, 1 в п'ятій це 1. тру порівнюємо з 1 це як 1 порівнюємо з 1, не менше, значить фолс.